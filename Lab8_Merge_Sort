#include <stdio.h>
#include <time.h>
#include <stdlib.h>

void delay(){
    int i, temp;
    for(i=0; i<5000; i++){
        temp = 123/234;
    }
}

void merge(int arr[], int l, int m, int r)
{
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;
 
    int Larr[n1], Rarr[n2];
 
    for (i = 0; i < n1; i++)
        Larr[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        Rarr[j] = arr[m + 1 + j];
 
    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2) {
        if (Larr[i] <= Rarr[j]) {
            arr[k] = Larr[i];
            i++;
        }
        else {
            arr[k] = Rarr[j];
            j++;
        }
        k++;
        delay();
    }
 
    if(j==n2){
        while(i != n1){
            arr[k] = Larr[i];
            i++;
            k++;
        }
    }else{
        while(j != n2){
            arr[k] = Rarr[j];
            j++;
            k++;
        }
    }
}
 
void mergeSort(int arr[], int l, int r)
{
    if (l < r) {
        int m = l + (r - l) / 2;
 
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);
 
        merge(arr, l, m, r);
    }
}

int main()
{
    int arr[10000];
    int n = 10000, i, j;
    clock_t start, end;
    for(i = 1000; i <= n; i += 2000){
        for(j = 0; j < i; j++)
        arr[j] = rand() % 1000; 
    
        start = clock();
        mergeSort(arr, 0, i - 1);
        end = clock();
        printf("Time taken to sort %d numbers: %f seconds \n", i, (double)(end-start)/CLOCKS_PER_SEC);
    }
    return 0;
}
